Enrich your data prior to map generalisation
--------------------------------------------

Since the beginning of research on the automation of map generalisation,
the necessity for enrichment has been clear. There are properties,
structures, which are implicit in the spatial arrangement of geometries in the map.
These properties, structures are necessary to make the best decision when generalising the map,
and this data enrichment step helps by making these properties, these structures explicit cartographic data.

Stroke computation (for river networks)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. class:: RiverStrokeNetwork(lines, attributeNames)

    This Class contains methods allowing the computation of the strokes in a river network. 
    
    :param lines: The geopanda dataframe from which the network must be initialized. It must contain an 'id' column with a unique id (the name is case sensitive). Geometry must be simple LineString (no MultiLineString). The geometry can have a Z value but inconsistencies in Z value may make the stroke research fails.  
    :type lines: GeoDataFrame
    :param attributeNames: List of attribute names to be used as a criteria for continuity.
    :type attributeNames: list[str]
    The initialization of this class is required prior to computing strokes, it includes the precomputing of neighbouring relations between edges of the network.


.. method:: buildRiverStrokes(self, attributeNames,deviatAngle, deviatSum)

    This method computes strokes in a RiverStrokeNetwork, and updates its strokes attributes. It can find strokes in complex braided networks.

    :param self: The RiverNetwork in which we expect to compute strokes
    :type self: RiverStrokeNetwork
    :param attributeNames: List of attribute names to be used as a criteria for continuity.
    :type attributeNames: list[str]
    :param deviatAngle: Thresholds for the maximum angle between two segments at the junction of two sections belonging to the same stroke.
    :type deviatAngle: float
    :param deviatSum: Thresholds for the maximum angle between two sections belonging to the same stroke.
    :type deviatAngle, deviatSum: float
    Stroke are computed from sources to sink while computing Strahler order.
    First, it identifies each source as a departure for a stroke adds them to the downstream section list and sets its Strahler order to 1.
    Then the main loop runs through the downstream section list, pops the current element and adds the next section in its stroke (if exists).


.. code-block:: pycon
    from shapely.geometry import LineString, Point
    import geopandas as gpd
    from cartagen.enrichment import RiverStrokeNetwork
    import matplotlib.pyplot as plt

    data={'geometry':
        [LineString([Point(1,4),Point(1, 3)]),
         LineString([Point(1.5,3.5),Point(1, 3)]),
         LineString([Point(1, 3),Point(1, 2.4)]),
         LineString([Point(1, 2.4),Point(0.8, 1.8),Point(0.9, 1.5)]),
         LineString([Point(1, 2.4),Point(1.2, 2.1)]),
         LineString([Point(1.2, 2.1),Point(0.9, 1.5)]),
         LineString([Point(0.9, 1.5),Point( 1.2,0.6)]),
         LineString([Point(1.2, 2.1),Point( 1.2,0.6)]),
         LineString([Point( 1.2,0.6),Point(1.1, 0.3)]),
         LineString([Point(1.1, 0.3),Point(1, 0)]),
         LineString([Point(0.5, 2),Point(1.1, 0.3)])],
        'id':[1,2,3,4,5,6,8,9,10,11,12]}
    lines =gpd.GeoDataFrame(data, crs="EPSG:4326")

    sn=RiverStrokeNetwork(lines,None)

    sn.buildRiverStrokes([], 45,30)
    array=sn.reconstruct_strokes()
    gdf = gpd.GeoDataFrame(array,  columns = ['id', 'geom',"strahler"],crs="epsg:4326",geometry="geom")

    a=gdf.plot('id')
    plt.show()

    b=gdf.plot('strahler')
    plt.show()

.. plot:: code/riverstroke.py

Figure 12. A river network with color depicting the stroke. 
Figure 13. A river network with color depicting the Horton order : purple =1; yellow=2.

.. method:: save_strokes_shp(path)

    This method save the computed stroke in a shapefile. 
    
    :param path: The access path to the file in which the stroke must be recorded
    :type path: str
    
    The saved shapefile is made with segment belonging to a unique stroke merged in a geometries  the attributes of each geometries are an id (generated as a serial) and the comma-separated list of IDs of initial sections used to construct the stroke.

GALBE
~~~~~

GALBE (Généralisation Adaptative du Linéaire Basée sur l'Empâtement - Adaptative Linear Generalisation based on Pastiness)
is a process proposed by Mustière. :footcite:p:`mustiere:2001`
It is specialised in sinuous roads generalisation and rely on the detection of the
pastiness of a line, *i.e.* whether the line symbol overlaps itself.
If the line symbol overlaps itself on on side or on two side, it applies different generalisation algorithms.