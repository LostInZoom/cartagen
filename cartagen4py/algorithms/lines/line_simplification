# this file contains several line simplification algorithms, but not the Douglas & Peucker algorithm because it is already implemented in shapely

from shapely.geometry import LineString, Point, Polygon

# Visvalingam-Whyatt algorithm (1993)
def visvalingam_whyatt(line, area_tolerance):
    final_coords = list(line.coords)
    while (True):
        pt_area_min = None
        area_min = line.envelope.area
        current_line = LineString(tuple(final_coords))
        for i in range(1,len(final_coords)-2):
            pt = final_coords[i]
            if(__contains_another_point(current_line, pt, i)):
                continue
            area = __compute_area_point(current_line, pt, i)
            if (area < area_min):
                area_min = area
                if(area < area_tolerance):
                    pt_area_min = pt
        if(pt_area_min is None):
            break
        # remove pt from the line
        final_coords.remove(pt_area_min)

    return LineString(tuple(final_coords))


def __compute_area_point(line, pt, index):
    first = line.coords[index-1]
    last = line.coords[index+1]
    triangle = [first, pt, last, first]
    polygon = Polygon(triangle)
    return polygon.area

def __contains_another_point(line, pt, index):
    first = line.coords[index-1]
    last = line.coords[index+1]
    triangle_coords = [first, pt, last, first]
    triangle = Polygon(triangle_coords)
    for vertex in line.coords:
        if (vertex == first):
            continue
        if (vertex == pt):
            continue
        if (vertex == last):
            continue
        if (triangle.contains(Point(vertex))):
            return True
    return False

# Raposo simplification algorithm (2010): uses an hexagonal tessallation, with a size related to the final scale, 
# and the algorithm only retains one vertex per hexagonal cell.
def __raposo_simplification(line, initial_scale, final_scale):
    # TODO
    return line


# Li-Openshaw simplification algorithm (1993). The simplification factor is the size of the regular grid applied on the line
def __li_openshaw_simplification(line, cell_size):
    # TODO
    return line

if __name__ == '__main__':
    from shapely.wkt import loads
    from shapely.geometry import Polygon, LineString
    import matplotlib.pyplot as plt
    import geopandas as gpd

    line = loads('LineString Z (451721.79999999998835847 6236248 378.10000000000002274, 451756.90000000002328306 6236275.09999999962747097 377.39999999999997726, 451780.09999999997671694 6236295.59999999962747097 376.60000000000002274, 451794.59999999997671694 6236304.79999999981373549 376.19999999999998863, 451817.59999999997671694 6236326.20000000018626451 376.19999999999998863, 451848.59999999997671694 6236349.40000000037252903 376.39999999999997726, 451865.09999999997671694 6236361.79999999981373549 374.60000000000002274, 451879.5 6236374.70000000018626451 374.60000000000002274, 451905 6236389.70000000018626451 374.10000000000002274, 451942.70000000001164153 6236418.59999999962747097 372.80000000000001137, 451978.5 6236436.79999999981373549 372.10000000000002274, 452004.20000000001164153 6236445.09999999962747097 371.89999999999997726, 452033.29999999998835847 6236460.59999999962747097 371.60000000000002274, 452055.59999999997671694 6236472.40000000037252903 371.39999999999997726, 452096.59999999997671694 6236490.20000000018626451 371.39999999999997726, 452105.29999999998835847 6236494 371.39999999999997726, 452147 6236522.5 370.80000000000001137, 452155.70000000001164153 6236524.70000000018626451 370.80000000000001137, 452162.79999999998835847 6236524.29999999981373549 370.80000000000001137, 452170.09999999997671694 6236519 370.80000000000001137, 452175.29999999998835847 6236518.40000000037252903 370.80000000000001137, 452179 6236519.70000000018626451 370.60000000000002274, 452202.90000000002328306 6236527.20000000018626451 370, 452206.20000000001164153 6236530.29999999981373549 369.89999999999997726, 452207.5 6236537.40000000037252903 369.89999999999997726, 452209.59999999997671694 6236540.20000000018626451 369.89999999999997726, 452227.59999999997671694 6236550.59999999962747097 369.69999999999998863, 452247.59999999997671694 6236548.70000000018626451 369.30000000000001137, 452250.90000000002328306 6236548.40000000037252903 369.10000000000002274, 452258.20000000001164153 6236550.70000000018626451 369.10000000000002274, 452261.5 6236559 368.60000000000002274, 452267.40000000002328306 6236562.20000000018626451 368.60000000000002274, 452277.59999999997671694 6236565.09999999962747097 368.60000000000002274, 452280.90000000002328306 6236569.40000000037252903 368.60000000000002274, 452282.70000000001164153 6236574.40000000037252903 368.5, 452293.70000000001164153 6236580.20000000018626451 368.30000000000001137, 452295.09999999997671694 6236587 367.89999999999997726, 452299 6236593.79999999981373549 367.80000000000001137, 452307.79999999998835847 6236596.40000000037252903 367.80000000000001137, 452306.90000000002328306 6236601.70000000018626451 367.69999999999998863, 452302 6236607.20000000018626451 367.60000000000002274, 452302.90000000002328306 6236610.40000000037252903 367.5, 452307.40000000002328306 6236616.79999999981373549 367.5, 452310.40000000002328306 6236616.70000000018626451 367.5, 452320.59999999997671694 6236612 367.19999999999998863, 452335 6236610.20000000018626451 367, 452335 6236604.29999999981373549 367, 452330 6236594.70000000018626451 366.69999999999998863, 452331.29999999998835847 6236591.79999999981373549 366.69999999999998863, 452336.29999999998835847 6236589.90000000037252903 367.19999999999998863, 452341.29999999998835847 6236589.70000000018626451 367.19999999999998863, 452348 6236591.40000000037252903 367.30000000000001137, 452346.5 6236596 367.30000000000001137, 452347.09999999997671694 6236599 367.30000000000001137, 452359.70000000001164153 6236609.20000000018626451 366.60000000000002274, 452367.09999999997671694 6236610.40000000037252903 366.60000000000002274, 452374.09999999997671694 6236608.20000000018626451 366.30000000000001137, 452381.40000000002328306 6236610 366.10000000000002274, 452392 6236609.59999999962747097 366.10000000000002274, 452402.20000000001164153 6236616 366.10000000000002274, 452414.79999999998835847 6236618.70000000018626451 366.10000000000002274, 452417.59999999997671694 6236622.70000000018626451 366.10000000000002274, 452421.40000000002328306 6236632.79999999981373549 366.10000000000002274, 452426.79999999998835847 6236637 366.10000000000002274, 452434.29999999998835847 6236637.70000000018626451 366.10000000000002274, 452459.20000000001164153 6236633.79999999981373549 366.10000000000002274, 452466.90000000002328306 6236635.40000000037252903 366.10000000000002274, 452470.29999999998835847 6236638.5 366.10000000000002274, 452475.5 6236652 365.89999999999997726, 452480.70000000001164153 6236659.70000000018626451 365.89999999999997726, 452482.70000000001164153 6236667 365.69999999999998863, 452487.79999999998835847 6236674.70000000018626451 365.69999999999998863, 452504.5 6236683.5 365, 452518.20000000001164153 6236688.5 365, 452535.79999999998835847 6236697.09999999962747097 365, 452544.79999999998835847 6236712.09999999962747097 365, 452564.70000000001164153 6236724.29999999981373549 364.89999999999997726, 452580.70000000001164153 6236745.79999999981373549 364.19999999999998863, 452597.59999999997671694 6236758.70000000018626451 363.80000000000001137, 452615.09999999997671694 6236769.5 363.60000000000002274, 452631.20000000001164153 6236783.29999999981373549 363.39999999999997726, 452644.09999999997671694 6236800.29999999981373549 363.39999999999997726, 452644.29999999998835847 6236805.09999999962747097 363.39999999999997726, 452644.79999999998835847 6236811.59999999962747097 364, 452641 6236844.90000000037252903 363.80000000000001137, 452629.20000000001164153 6236861.59999999962747097 363.80000000000001137, 452595.59999999997671694 6236926.70000000018626451 363.5)')

    simplified = visvalingam_whyatt(line, 150)
    p1 = gpd.GeoSeries(line)
    p2 = gpd.GeoSeries(simplified)
    base = p1.plot()
    p2.plot(ax=base, color='red')
    plt.show()